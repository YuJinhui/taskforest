{
  "name": "TaskForest",
  "tagline": "A simple, expressive, open-source, text-file-based Job Scheduler with console, HTTP, and RESTful API interfaces.",
  "body": "# TaskForest\r\n---\r\n[![Build Status](https://travis-ci.org/aijaz/taskforest.svg?branch=master)](https://travis-ci.org/aijaz/taskforest)\r\n\r\n**TaskForest** is a simple but expressive job scheduler that allows you to\r\nchain jobs/tasks and create time dependencies. It uses text config files to\r\nspecify task dependencies.\r\n\r\n### Executive Summary \r\n\r\nWith the TaskForest Job Scheduler you can:\r\n\r\n- schedule jobs run at predetermined times\r\n- have jobs be dependent on each other\r\n- rerun failed jobs\r\n- mark jobs as succeeded or failed\r\n- put jobs on hold and release the holds\r\n- release all dependencies on a job\r\n- automatically rerun jobs that fail\r\n- receive custom emails or SMS when jobs fail, are retried, or succeed\r\n- check the status of all jobs scheduled to run today\r\n- interact with the included web service using your own client code\r\n- interact with the included web server using your default browser\r\n- express the relationships between jobs using a simple text-based format (a big advantage if you like using 'grep')\r\n- browse job logs using the included web server\r\n\r\n## About\r\n\r\n### A Quick Introduction to Job Schedulers\r\n\r\nA Job Scheduler is an application that is responsible for scheduling and running programs (also known as jobs or tasks). The user specifies dependencies between jobs, and the job scheduler runs each job only after all its dependencies have been met. Dependencies may be the successful completion of another job (the prerequisite job), or a certain time of day, or ownership of a limited resource or token.\r\n\r\nThe job scheduler is also responsible for allowing the operator to rerun failed (or even successful) jobs, mark jobs as having succeeded or failed, and querying the status of all the jobs that are scheduled to run.\r\n\r\nCollections of jobs that are dependent on each other are known as Families. Some schedulers call Families \"Job Streams.\"\r\n\r\n### TaskForest Design Philosophy\r\n\r\nThe TaskForest Job Scheduler is designed with the philosophy that a program should be no more complicated than the minimum amount required to achieve its objectives. Complicated functions can be achieved by a conjunction of simpler functions.\r\n\r\nTo illustrate this, TaskForest has been designed to run as a single command that, once invoked from the command line, launches any jobs that need to be run, and then sleeps for a bit and then tries again. If you want, the taskforest script can also exit and be run repeatedly. It is a stateless application. You could launch taskforest once a day, and have it run all day, or you could run it once every minute (for example) using cron.\r\n\r\nSince TaskForest does not need any graphical interface, it can be run on headless servers that don't have X installed. If you would prefer a graphical interface, it also comes with its own web server so that you can administer the application using any standard web browser. We also provide you a RESTful API that allow you to write your own web clients, so that you can control TaskForest from within your program. Everything you need to do to configure the system can be done by editing text files. \r\n\r\n### <a name=\"text_files\"></a>Why Text Files are a Good Idea\r\n\r\nOne of the initial design requirements of TaskForest was that it be easily configuriable with just a shell prompt and your favorite text editor. Many of the servers I administer are old boxes which I administer by logging into them via ssh. So when it came to designing job dependencies in Family files, I chose a text file representation. The benefits of text files over a graphical user interface for this are many:\r\n\r\n- **Easy Remote Access** - All you need is the ability to get to a command line and a text editor on the machine that runs taskforest. With the such low client access requirements, virtually any old machine that has internet access and an ssh client can be used to administer the system. I have often worked on our taskforestd server from a local internet cafe using a Putty.exe downloaded minutes earlier.\r\n- **Mobile Access** - Text files also make work relatively easy using a mobile ssh client like Idokorro Mobile SSH. A dedicated mobile client would be ideal, but short of that, the text file approach assures low bandwidth usage and easy-to-make changes.\r\n- **Flexibility** - The simple, easily parseable format of text files allows us to build richer clients later that would use a graphical interface to specify relationships between jobs.\r\n- **Source Control** - The text based format makes it easy to place the Family files under source control. You can also easily diff different versions of the same family file.\r\n- **Grep** - When you have dozens of family files and hundreds of jobs, you may need to answer questions like: \"Are we still running Job J1? It needs to be decommissioned.\" This can easily be answered by grepping the Family files for job J1.\r\n\r\n### Comparing TaskForest to cron\r\n\r\nCron is a very powerful tool, but lacks some important features that most job schedulers perform: It's not easy to specify complex dependencies between jobs. It's also not possible to use cron to rerun jobs or mark jobs as having succeeded so that dependent jobs may run.\r\n\r\n### TaskForest Licensing and Pricing\r\n\r\nTaskForest is distributed free of charge. It's open-source software that's distributed under the Apache License. For details, please read the LICENSE file.\r\n\r\nThe above does not apply to the files avilable on the website under the `/yui` url, which is licensed under the [BSD License](https://github.com/yui/yui3/blob/master/LICENSE.md).\r\n\r\n### System Requirements\r\n\r\nTaskForest is written in Perl. It requires Perl 5.8.3 or higher, and the following libraries (available from [CPAN](http://cpan.org/)):\r\n\r\n- [DateTime](http://search.cpan.org/search?mode=all&query=DateTime)\r\n- [Config::General](http://search.cpan.org/search?mode=all&query=Config%3A%3AGeneral) version 2.38 or higher\r\n- [Log::Log4perl](http://search.cpan.org/search?mode=all&query=Log%3A%3ALog4perl) version 1.16 or higher\r\n- [HTTP::Daemon](http://search.cpan.org/search?mode=all&query=HTTP%3A%3ADaemon) version 5.818 or higher\r\n- [HTTP::Status](http://search.cpan.org/search?mode=all&query=HTTP%3A%3AStatus) version 5.817 or higher\r\n- [HTTP::Response](http://search.cpan.org/search?mode=all&query=HTTP%3A%3AResponse) version 5.820 or higher\r\n- [HTTP::Request](http://search.cpan.org/search?mode=all&query=HTTP%3A%3ARequest) version 5.818 or higher\r\n- [Net::SMTP](http://search.cpan.org/search?mode=all&query=Net%3A%3ASMTP) version 2.31 or higher\r\n\r\nMost of the testing has been performed on Unix-like operating systems like Linux, FreeBSD, Mac OSX. There has been some testing on Windows, but it is not as exhaustive as that on other operating systems. It is recommended that you run TaskForest on a Unix-like server.\r\n\r\n### TaskForest Support\r\n\r\nFor support, please visit our website at http://www.taskforest.com/ or\r\ncreate an issue on GitHub.\r\n\r\nIf you would like commercial support, please contact me on Twitter at <a href=\"http://twitter.com/@_aijaz_\">@_aijaz_</a> or via email at ```taskforest``` ```@``` ```aijaz``` ```dot net```.\r\n\r\n### Authors\r\n\r\n[Aijaz A. Ansari](http://aijaz.net/)\r\n\r\nThe following developers have graciously contributed patches to enhance TaskForest:\r\n\r\n-  Steve Hulet\r\n\r\nPlease see the 'Changes' file for details. If you have contributed code,\r\nand your name is not on the above list, please accept my apologies and\r\nlet me know, so that I may give you credit.\r\nIf you're using this program, I would love to hear from you. Please contact me on Twitter at @\\_aijaz\\_ and let me know.\r\n\r\n### Acknowledgements\r\n\r\nMany thanks to the following for their help and support:\r\n\r\n- GitHub\r\n- Rosco Rouse\r\n- Svetlana Lemeshov\r\n- Teresia Arthur\r\n- Steve Hulet\r\n\r\nI would also like to thank Randal L. Schwartz for teaching the readers\r\nof the Feb 1999 issue of Web Techniques how to write a pre-forking web\r\nserver, the code upon which the TaskForest Web server is built.\r\n\r\nI would also like to thank the fine developers at Yahoo! for providing\r\nyui to the open source community.\r\n\r\n## Installing TaskForest\r\n\r\nThis program depends on DateTime, for timezone support. You can install DateTime as follows:\r\n\r\n```\r\nperl -MCPAN -e 'install DateTime'\r\n```\r\n\r\nSimilarly, as of version 1.10, it also depends on Config::General and Log::Log4perl. You can install these as follows:\r\n\r\n```\r\nperl -MCPAN -e 'install Config::General'\r\nperl -MCPAN -e 'install Log::Log4perl'\r\n```\r\n\r\nAs of version 1.15, it also depends on the LWP libraries such as HTTP::Daemon, HTTP::Request, etc.\r\n\r\nDownload the latest TaskForest repository. You can install it the 'normal' way:\r\n\r\n```\r\ncd taskforest\r\nperl Makefile.PL\r\nmake\r\nmake test\r\nmake install\r\n```\r\n\r\nIf you don't have root access, and want to install in a local directory like ~/perl, replace the third line with\r\n\r\n```\r\nperl Makefile.PL prefix=~/perl\r\n```\r\n\r\n## Configuring TaskForest\r\n\r\nThere are two main parts to configuring TaskForest: configuring the Family files that specify job dependencies, and setting the options that determine TaskForest's behavior.\r\n\r\n### Precedence of Different Options Sources\r\n\r\nAll settings (required and optional) may be specified in a variety of ways: command line, environment variable and config file. The order of preferences is this: Most options have default values. Settings specified in the config file override those defaults. Settings specified in environment variables take override those specified in the config file and the default values. Setting specified on the command line override those specified in envrionment variables, and those specified in the config files and the default values.\r\n\r\nThe names of the environment variable are the same as the names of the settings on the command line (or in the config file), but they should be in UPPER CASE, with `TF_` prepended. For example, the environment variable name for the [`run_wrapper`](#run_wrapper) setting is `TF_RUN_WRAPPER`.\r\n\r\n## Jobs & Families\r\n\r\nA job is defined as any executable program that resides on the file system. It is represented as a file in the files system whose name is the same as the job name. Jobs can depend on each other. Jobs can also have start times before which a job may not by run.\r\n\r\nWhen a job is run by the run wrapper (`bin/run_with_log`), two status semaphore files are created in the [log directory](#log_directory). The first is created when a job starts and has a name of `$FamilyName.$JobName.pid`. This file contains some attributes of the job. When the job completes, more attributes are written to this file.\r\n\r\nWhen the job completes, another semaphore file is written to the [log directory](#log_directory). The name of this file will be `$FamilyName.$JobName.0` if the job ran successfully, and `$FamilyName.$JobName.1` if the job failed. In either case, the file will contain the exit code of the job (0 in the case of success and non-zero otherwise).\r\n\r\nWhen a job is run by the `run_with_log` run wrapper, any output the job sends to stdout or stderr will be captured and stored in a file called `$FamilyName.$JobName.$pid.$start_time.stdout` in the [log directory](#log_directory).\r\n\r\n## Job Status\r\n\r\nWithin TaskForest, every job has a status, which is one of the following values:\r\n\r\n- **Waiting** - One or more dependencies of the job have not been met.\r\n- **Ready** - All dependencies have been met; the job will run during the next iteration of the [taskforest main loop](#main_loop).\r\n- **Running** - The job is currently running\r\n- **Success** - The job has run successfully\r\n- **Failure** - The job was run, but the program exited with a non-zero return code\r\n\r\n## Jobs & Families\r\n\r\nJobs can be grouped together into **families**. A family has a start time associated with it before which none of its jobs may run. A family also has a either (a) a list of days-of-the-week or (b) a calendar associated with it. Jobs within a family may only run on the days specified by the days-of-the-week or the calendar.\r\n\r\nJobs and families are given simple names. A family is described in a family file whose name is the family name. Each family file is a text file that contains 1 or more job names. The layout of the job names within a family file determine the dependencies between the jobs (if any). There are [several reasons why text files are a good choice for Family files](#text_files).\r\n\r\nFamily names and job names should contain only the following characters:\r\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\r\n\r\nLet's see a few examples. The main script expects environment variables or command line options or configuration file settings that specify the locations of the directory that contain family files, the directory that contains job files, and the directory where the logs will be written. The directory that contains family files should contain only family files.\r\n\r\n#### EXAMPLE 1 - Family file named F_ADMIN\r\n\r\n```config\r\nstart => '02:00', tz => 'GMT', days => 'Mon,Wed,Fri'\r\n\r\n J_ROTATE_LOGS()\r\n```\r\n  \r\nThe first line in any family file always contains 3 bits of information about the family: the start time, the time zone, and the days on which this jobs in this family are run, or the calendar that specifies on which dates jobs in this family are run.\r\n\r\nIn this case, this family starts at 2:00 a.m. Chicago time. The time is adjusted for daylight savings time. This family 'runs' on Monday, Wednesday and Friday only. Pay attention to the format: it's important.\r\n\r\nValid days are 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'. Days must be separated by commas.\r\n\r\nAll start times (for families and jobs) are in 24-hour format. '00:00' is midnight, '12:00' is noon, '13:00' is 1:00 p.m. and '23:59' is one minute before midnight.\r\n\r\nThere is only one job in this family - J_ROTATE_LOGS. This family will start at 2:00 a.m., at which time J_ROTATE_LOGS will immediately be run. Note the empty parentheses [()]. These are required.\r\n\r\nWhat does it mean to say that J_ROTATE_LOGS will be run? It means that the system will look for a file called J_ROTATE_LOGS in the directory that contains job files. That file should be executable. The system will execute that file (run that job) and keep track of whether it succeeded or failed. The J_ROTATE_LOGS script can be any executable file: a shell script, a perl script, a C program etc.\r\n\r\nTo run the program, the system actually runs a wrapper script that invokes the job script. The location of the wrapper script is specified on the command line or in an environment variable.\r\n\r\nNow, let's look at a slightly more complicated example:\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}